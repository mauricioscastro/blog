apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: new-pipeline
  namespace: blog
spec:
  workspaces:
    - name: git-source
    - name: registry-credentials
    - name: git-credentials
  params:
    - name: pdf-dest-dir
      type: string
      default: /usr/local/documents/mscastro-blog         
  tasks:
    #
    # clone repo with git-clone
    #    
    - name: git-clone
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - workspace: git-source
          name: output
      params:
        - name: url
          value: https://github.com/mauricioscastro/blog
        - name: subdirectory
          value: .
        - name: deleteExisting
          value: 'true'
    #
    # test build with jekyll
    #            
    - name: build-site
      runAfter:
        - git-clone     
      workspaces:
        - workspace: git-source
          name: output
      taskSpec:
        steps:
          - name: build
            image: jekyll/builder
            resources: {}
            script: |-
              cd $(workspaces.output.path)
              chmod -R a+rwx .
              bundle install
              bundler exec jekyll build --incremental
    #
    # test md conversion to pdf
    #                   
    - name: add-pdf
      runAfter:
        - build-site
      workspaces:
        - workspace: git-source 
          name: output
      taskSpec:
        params:
          - name: pdf-dest-dir
            default: $(params.pdf-dest-dir)
        steps:
          - name: md-to-pdf
            image: bladerunner2020/markdown-to-file
            script: |-
              mkdir -p $(params.pdf-dest-dir)
              mv $(workspaces.output.path)/* $(params.pdf-dest-dir)
              for md in `find $(params.pdf-dest-dir) -name "*.md" | grep -v 404`; do 
                m2f $md pdf \
                  footerTemplate="<div style=\"font-size: 9px; margin: 0 auto;\"> <span class="pageNumber"></span> / <span class="totalPages"></span></div>" \
                  headerTemplate="<span/>" margin.top="0.8cm" 
              done
              mv $(params.pdf-dest-dir)/* $(workspaces.output.path)
          - name: check-pdf-exists
            image: alpine
            script: |-              
              pdf_count=`find $(workspaces.output.path) -name  "*.pdf" | wc -l`
              echo "number of converted pdfs: $pdf_count"
              test $pdf_count -gt 0
    #
    # use kaniko to push 
    #              
    # - name: kaniko
    #   runAfter: 
    #     # - add-pdf
    #     - git-clone
    #   taskRef:
    #     kind: Task
    #     name: kaniko  
    #   workspaces:
    #     - workspace: git-source
    #       name: source
    #     - workspace: registry-credentials 
    #       name: dockerconfig
    #   params:
    #     - name: commit 
    #       value: $(tasks.git-clone.results.commit)
    #
    # use podman to push 
    #        
    - name: podman
      runAfter:
        - add-pdf   
      workspaces:
        - workspace: git-source 
          name: output
        - workspace: registry-credentials 
          name: dockerconfig   
      params:
        - name: commit
          value: $(tasks.git-clone.results.commit)
      taskSpec:
        params:
          - name: image
            default: quay.io/mauriciosantiagodecastro/blogrunner
          - name: commit 
        results:
          - name: image-tag
        steps:
          - name: build-and-push
            image: quay.io/podman/stable
            securityContext:
              privileged: true                    
            script: |-
              export REGISTRY_AUTH_FILE=$(workspaces.dockerconfig.path)/config.json
              short=`echo $(params.commit) | cut -c 1-7`
              build_date=`date +'%Y%m%d%H%M%S'`              
              cd $(workspaces.output.path)
              podman build . -t $(params.image):$short.$build_date
              podman push $(params.image):$short.$build_date 
              podman push $(params.image):$short.$build_date $(params.image):latest
              echo "$short.$build_date" > $(results.image-tag.path)
    #
    # update deployment so argo can sense and flag out-of-sync
    #     
    - name: cd-update
      runAfter:
        - podman
      workspaces:
        - workspace: git-source 
          name: output
        - workspace: git-credentials 
          name: gitssh   
      params:
        - name: version
          value: $(tasks.podman.results.image-tag)
      taskSpec:
        params:
          - name: version 
        steps:
          - name: update-deployment
            image: alpine
            script: |-   
              manifest=$(workspaces.output.path)/cicd/argo/deployment.yaml
              export version=$(params.version)
              apk --no-cache add yq git > /dev/null 2>&1
              export GIT_SSH_COMMAND="ssh -i $(workspaces.gitssh.path)/gitkey -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
              git config --global --add safe.directory $(workspaces.output.path)
              cd $(workspaces.output.path)
              git reset --hard
              yq -i 'with(select(.kind=="Deployment" and .metadata.name=="blog"); .metadata."app.kubernetes.io/version" = strenv(version))' $manifest
              cat $manifest
              git add $manifest
              # git commit -m "updating deployments with version $version"
              git status
    - name: clean
      runAfter:
        - cd-update 
      taskSpec:
        steps:
          - name: clean
            image: alpine
            script: |-
              echo "nothing to do"             
